# 1.DTO와 VO 분리
    * DTO와 VO를 분리하였다. 잘 모르고 같이 사용하였다. DTO와 VO를 나누어서 사용하였다.
       
    * VO와 DTO둘다 데이터를 저장하는 용도이다. 다만 각각 사용영역을 구분해서 사용한다.

    * VO와 DTO에 대해 간략히 정리한다.

        * VO는 Database와 밀접하다.
        즉 DB의 도메인정보를 클라이언트에게 전달할 때, 그 도메인단위 정보를 VO로 구현하여 사용한단다.

        * 클라이언트와 데이터를 주고 받는 경우, VO가 가진 맴버변수보다 적은 멤버변수를 갖을 수 있으며, VO에는 없는 추가적인 변수를 가질수도 있다.
        이렇게 DB의 도메인과 일치하지 않으며, 어떤 로직에 사용되는 영속적이지 않는 데이터를 포함하는 DTO클래스로 만들어서 사용한다.

# 3. 구조적인 설계
    *본 프로젝트의 기능은 크게  user, concert 두가지로 나뉜다. 
    패키지는 크게 모델별로 나누고 기능별로 세분화 하는 것이 좋다고 생각한다. 
    
    이유는, 구체적으로 보자면 DB의 테이블이라 할 수도 있습니다. 
    기본적으로 업무에서 웹프로젝트를 작성할 때 주된 작업은 DB에 있는 자료를 입력, 수정, 삭제하는 식의 작업이라서 
    테이블별로 분류한 패키지는 DB와 관련된 작업을 편하게 할수 있고, 동시에 협업 할 경우에도 패키지구조 이해를 쉽게 할수 있다.


# 2.service 객체의 2단 상속
    interface GenericService
    Service extends GenericService
    ServiceImpl

    기본 CRUD를 GenericService에 만들어두고 상속 받는 Service만의 함수를 만들고, 이를 ServiceImpl에서 구현하였다.
          


# if문이 없어야 하나? 지나친 삼항연산자 지양
    /*

    if문과 삼항연사자의 비교 코드

    */
    if문이 없는 코드가 깔끔하다는 인식이 있는거 같다.
    삼항연산자로 코드를 작성하면 깔끔하지만, 많이 알려지다보니 남발하여 코드의 가독성을 떨어뜨리는 경우가 있는거 같다.

# 코틀린 기본적인 문법 숙지




